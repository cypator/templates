name: CI-template
on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      docker_arguments:
        required: false
        type: string
    secrets:
      aws-access-key-id:
        description: "access key id for ecr"
        required: true
      aws-secret-access-key:
        description: "secret access key for ecr"
        required: true
      helm-repo-access-key:
        description: "clone into devops repo"
        required: true

jobs:
  docker-build:
    runs-on: ubuntu-24.04
    env:
      gitSha: ${{ github.sha }}
    timeout-minutes: 45
    concurrency:
      group: ${{ inputs.service_name }}
      cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: get services hash
        id: service-hashes
        run: |
          service=$(echo ${{ inputs.service_name }})
          if [[  $service != 'identity' && $service != 'data-agent' && $service != 'backoffice' && $service != 'trading-webserver' && $service != 'trading-nextjs' && $service != 'post-trade' && $service != 'acceptorengine' && $service != 'acceptorenginewebsocket' && $service != 'rateservice'  ]]
          then
            hashPath=$GITHUB_WORKSPACE/${{ inputs.service_name }}
            echo "hash path: $hashPath"
            hash="$(find ${hashPath} -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum | cut -d " " -f 1)"
            echo "hash of service (if) is: $hash"
            echo "image_hash=$hash" >> $GITHUB_OUTPUT            
          else
             hashPath=$GITHUB_WORKSPACE
             echo "hash path: $hashPath"
             hash="$(find ${hashPath} -type f -not -path "${hashPath}/.git/*" -print0 | sort -z | xargs -0 sha1sum | sha1sum | cut -d " " -f 1)"
             echo "hash of service (else) is: $hash"
             echo "image_hash=$hash" >> $GITHUB_OUTPUT  
           fi
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          repository: 'cypator/devops'
          path: devops
          token: ${{ secrets.helm-repo-access-key }}
          ref: develop
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Read secrets of user and pass from AWS Secrets Manager and convert values in settings.xml
        if: ${{ inputs.service_name != 'data-agent' && inputs.service_name != 'prisma' && inputs.service_name != 'backoffice' && inputs.service_name != 'identity' && inputs.service_name != 'trading-webserver' && inputs.service_name != 'trading-nextjs' }} 
        run: |
          mvn_username=$(aws secretsmanager get-secret-value --secret-id mvn_username --region us-east-1 --query SecretString --output text | jq -r '.MVN_USERNAME')
          echo "mvnuser: $mvn_username"
          mvn_password=$(aws secretsmanager get-secret-value --secret-id mvn_password --region us-east-1 --query SecretString --output text | jq -r '.MVN_PASSWORD')
          echo "mvnpass: $mvn_passworbranchd"
          sed -i 's/MVN_USERNAME/'$mvn_username'/' .github/workflows/settings.xml
          sed -i 's/MVN_PASSWORD/'$mvn_password'/' .github/workflows/settings.xml
      - name: Cat Settings.xml file
        if: ${{ inputs.service_name != 'data-agent' && inputs.service_name != 'prisma' && inputs.service_name != 'backoffice' && inputs.service_name != 'identity' && inputs.service_name != 'trading-webserver' && inputs.service_name != 'trading-nextjs' }}
        run: cat .github/workflows/settings.xml
      - name: Converting upper case to lower case
        id: string
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ inputs.service_name }}
      - name: printing repository name
        run: echo ${{ steps.string.outputs.lowercase }}
      - name: Check if repo exist and put prod policy
        run: |
          repo_name=$(echo ${{ steps.string.outputs.lowercase }})
          echo $repo_name
          aws ecr describe-repositories --repository-names $repo_name || aws ecr create-repository --repository-name $repo_name
          aws ecr set-repository-policy --repository-name $repo_name --policy-text file://devops/.github/workflows/deploy/cross-account-policy.json
      - name: set branch-name
        id: branch-name
        run: |
          echo "BRANCH_NAME=$(echo $GITHUB_REF_NAME | sed "s/[^a-zA-Z0-9]/-/g")" >> $GITHUB_ENV
          echo "branch=$(echo $GITHUB_REF_NAME | sed "s/[^a-zA-Z0-9]/-/g")" >> $GITHUB_OUTPUT
      - name: Check if image hash tag is already exist in ECR image repository
        id: hash-tag-exist
        run: |
          set +e
          cmd="$(aws ecr describe-images --repository-name=${{ steps.string.outputs.lowercase }} --image-ids=imageTag=${{ steps.service-hashes.outputs.image_hash }})"
          if [[ ! -z "$cmd" ]]
          then
            echo "tag already exist"
            echo "tag_exist=true" >> $GITHUB_OUTPUT
          else
             echo "tag doesn't exist"
             echo "tag_exist=false" >> $GITHUB_OUTPUT
           fi
      - name: Read secrets for args docker file
        id: docker-args
        if: ${{ inputs.service_name == 'backoffice' || inputs.service_name == 'identity' || inputs.service_name == 'trading-webserver' || inputs.service_name == 'trading-nextjs'}} 
        run: |
          args=$(aws secretsmanager get-secret-value --secret-id PACKAGES_REPO_TOKEN --region us-east-1 --query SecretString --output text | jq -r '.PACKAGES_REPO_TOKEN')
          echo "args: $args"
          echo "args=$args" >> $GITHUB_OUTPUT
      - name: Build, tag, and push image to Amazon ECR
        if: ${{ steps.hash-tag-exist.outputs.tag_exist == 'false' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TAG_LIST: "${{github.run_number}},${{ github.sha }},${{ env.BRANCH_NAME }}"
          COMMIT_MESSAGE: "${{ github.event.head_commit.message }}"
          branch_name: ${{ env.BRANCH_NAME }}
          IMAGE_TAG: ${{ steps.service-hashes.outputs.image_hash }}
        run: |
          repo_name=$(echo ${{ steps.string.outputs.lowercase }})
          Docker_image=$ECR_REGISTRY/$repo_name:$IMAGE_TAG
          echo "Docker_image: $Docker_image"
          docker_folder=$(echo ${{ inputs.service_name }})
          echo "Service: $docker_folder"
          arguments=$(echo ${{ inputs.docker_arguments }})
          echo "Arguments: $arguments"
          if [[ ! -z $arguments ]]
          then
            echo "there are arguments"
            arguments=${{ steps.docker-args.outputs.args }}
            echo "Arguments: $arguments"
            if [[ $docker_folder == 'trading-nextjs' ]]
            then
              command="docker build -t $Docker_image -f Dockerfile --build-arg PACKAGES_REPO_TOKEN=$arguments --build-arg BACKEND_SERVICE_URL=https://backend.dev.cypator.net . "
            else
               command="docker build -t $Docker_image -f Dockerfile --build-arg PACKAGES_REPO_TOKEN=$arguments . "
            fi
          else
             echo "there are no arguments in docker file"
             docker_files='rateservice|post-trade|data-agent|acceptorengine|acceptorenginewebsocket'
             if [[ "$docker_files" == *"$docker_folder"* ]]
             then
               command="docker build -f Dockerfile . -t $Docker_image --progress=plain"
             else
                command="docker build -f $docker_folder/Dockerfile . -t $Docker_image --progress=plain"
             fi
           fi
          echo "$command"
          $command
          if [[ $branch_name == 'develop' || $branch_name == 'uat' || $branch_name == 'production' || $branch_name == 'productioncertpatch' || $COMMIT_MESSAGE =~ 'build image' ]]
          then
            docker push $Docker_image
          fi
      - name: Retag
        if: steps.branch-name.outputs.branch == 'develop' || steps.branch-name.outputs.branch == 'uat' || steps.branch-name.outputs.branch == 'production' ||  contains(github.event.head_commit.message, 'build image')
        env:
          HASH_TAG_EXIST: ${{ steps.hash-tag-exist.outputs.tag_exist }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          TAG_LIST_SHORT: "${{ env.BRANCH_NAME }}"
          TAG_LIST_FULL: "${{ env.BRANCH_NAME }},${{github.run_number}}"
          ECR_REPOSITORY: "${{ steps.string.outputs.lowercase }}"
        run: |
          if [[ "$HASH_TAG_EXIST" == 'true' ]]
          then
            echo "tag already exist"
            export TAG_LIST=$TAG_LIST_SHORT
          else
            echo "tag doesn't exist"
            export TAG_LIST=$TAG_LIST_FULL
          fi
          echo $TAG_LIST
          export MANIFEST=$(aws ecr batch-get-image --repository-name ${{ steps.string.outputs.lowercase }} --image-ids imageTag=${{ steps.service-hashes.outputs.image_hash }} --output json | jq --raw-output --join-output '.images[0].imageManifest')
          echo "MANIFEST: $MANIFEST"
          sh ./devops/scripts/ecr_retag.sh
      - name: push new tag to values file
        if: steps.branch-name.outputs.branch == 'develop' || steps.branch-name.outputs.branch == 'uat' || steps.branch-name.outputs.branch == 'production'
        run: |
          cd devops
          echo "git branch"
          git branch
          export tag=$(aws ecr describe-images --repository-name ${{ steps.string.outputs.lowercase }} --image-ids imageTag=${{ steps.service-hashes.outputs.image_hash }} --output json |jq -r '.imageDetails[0].imageTags[] | select(test("^[0-9]+$"))')
          echo $tag
          if [[ $branch_name == 'develop' ]]; then
          file_names=("values-cycling.yaml")
          elif [[ $branch_name == 'production' ]]; then
            file_names=("values-prod.yaml" "values-lonprod.yaml")
          else
            file_names=("values-${branch_name}.yaml")
          fi

          git config --global user.email "devops_automation@cypator.com"
          git config --global user.name "DevOps Automation"
          git config pull.rebase true

          for file_name in "${file_names[@]}"; do
            yamlfile="./helm/services/${dir_name}/${file_name}"
            yq '.image.tag = env(tag)' -i "$yamlfile"
            cat $yamlfile
            git add helm/services/${dir_name}/${file_name}

            echo "check mirror services:"
            mirror_services=$(echo $(cat scripts/ecr_overwrite.json) | jq  -r ".\"$dir_name\"")
            if [ "$mirror_services" != "null" ]; then
              IFS=","
              for service in $mirror_services; do 
                echo "change tag of $service also"
                yamlfile="./helm/services/${service}/${file_name}"
                yq  '.image.tag = env(tag)' -i "$yamlfile"
                cat $yamlfile
                git add helm/services/${service}/${file_name}
              done
              unset IFS   
            fi
          done
          echo "git commit"
          git commit -m "change tag of ${dir_name} to $tag on $branch_name"
          echo "git pull"
          git pull origin develop --autostash
          echo "git push"
          git push --force-with-lease
        env:
          branch_name: ${{ env.BRANCH_NAME }}
          dir_name: "${{ steps.string.outputs.lowercase }}"

